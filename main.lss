
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001ba  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  00000250  2**0
                  ALLOC
  3 .comment      00000026  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000088  00000000  00000000  000002b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000006f4  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000004d2  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000774  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000000e0  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000003b4  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000000c0  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000030  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	2f c0       	rjmp	.+94     	; 0x64 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	33 c0       	rjmp	.+102    	; 0x74 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ea eb       	ldi	r30, 0xBA	; 186
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	77 d0       	rcall	.+238    	; 0x132 <main>
  44:	b8 c0       	rjmp	.+368    	; 0x1b6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <ledFlash>:
#define ledOn( void )         PORTB |= PIN_LED;
#define ledOff( void )        PORTB &= ~PIN_LED;
#define ledToggle( void )     PORTB ^= PIN_LED;

void ledFlash( void ) {
  ledToggle();  
  48:	98 b3       	in	r25, 0x18	; 24
  4a:	20 e1       	ldi	r18, 0x10	; 16
  4c:	92 27       	eor	r25, r18
  4e:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	86 e9       	ldi	r24, 0x96	; 150
  52:	94 e0       	ldi	r25, 0x04	; 4
  54:	01 97       	sbiw	r24, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <ledFlash+0xc>
  58:	00 00       	nop
  _delay_ms( 50 );
  ledToggle();  
  5a:	88 b3       	in	r24, 0x18	; 24
  5c:	82 27       	eor	r24, r18
  5e:	88 bb       	out	0x18, r24	; 24
}
  60:	08 95       	ret

00000062 <soundFlash>:
  62:	f2 cf       	rjmp	.-28     	; 0x48 <ledFlash>

00000064 <__vector_2>:
volatile unsigned char buttonPush;

signed char timerMinutes = -1;

// Gets called whenever the someone pressed the button
ISR( PCINT0_vect ) {
  64:	8f 93       	push	r24
  if( PIN_TST ) {
  66:	b1 9b       	sbis	0x16, 1	; 22
  68:	03 c0       	rjmp	.+6      	; 0x70 <__vector_2+0xc>
    buttonPush = 1;
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <buttonPush>
  }
}
  70:	8f 91       	pop	r24
  72:	18 95       	reti

00000074 <__vector_6>:

ISR( TIM0_COMPA_vect ) {
  74:	1f 92       	push	r1
  76:	1f b6       	in	r1, 0x3f	; 63
  78:	1f 92       	push	r1
  7a:	11 24       	eor	r1, r1
  7c:	2f 93       	push	r18
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
  // Count time
  if( ++milliseconds == 1000 )  {
  82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <milliseconds>
  86:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <milliseconds+0x1>
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <milliseconds+0x1>
  90:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <milliseconds>
  94:	88 3e       	cpi	r24, 0xE8	; 232
  96:	93 40       	sbci	r25, 0x03	; 3
  98:	b9 f4       	brne	.+46     	; 0xc8 <__stack+0x29>
    ++absSeconds;
  9a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <absSeconds>
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <absSeconds>
    milliseconds = 0;
  a4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <milliseconds+0x1>
  a8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <milliseconds>
    if( ++seconds == 60 ) {
  ac:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <seconds>
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <seconds>
  b6:	8c 33       	cpi	r24, 0x3C	; 60
  b8:	39 f4       	brne	.+14     	; 0xc8 <__stack+0x29>
      seconds = 0;
  ba:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <seconds>
      ++minutes;
  be:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <minutes>
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <minutes>
    }
  }
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	2f 91       	pop	r18
  ce:	1f 90       	pop	r1
  d0:	1f be       	out	0x3f, r1	; 63
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <setupTimer0>:

void setupTimer0( void ) {
  // Configure Timer statics CTC with compare match
  TCCR0A = (1<<WGM01);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8f bd       	out	0x2f, r24	; 47
  // Set prescalar to 1/8,
  TCCR0B = (1<<CS01);
  da:	83 bf       	out	0x33, r24	; 51
  // ( F_CPU/8 Prescalar/1000Hz = 132 cycles/ms where 1000Hz equals 1 ms
  OCR0A = 132 -1;
  dc:	83 e8       	ldi	r24, 0x83	; 131
  de:	86 bf       	out	0x36, r24	; 54
}
  e0:	08 95       	ret

000000e2 <startTimer0>:

void startTimer0( void ) {
  cli(); 
  e2:	f8 94       	cli
  { // disabled interrupts
    // Init timer start values
    milliseconds  = 0;
  e4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <milliseconds+0x1>
  e8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <milliseconds>
    seconds       = 0;
  ec:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <seconds>
    minutes       = 0;
  f0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <minutes>

    // Start Timer for each ~ms
    TIMSK0 |= (1<<OCIE0A);
  f4:	89 b7       	in	r24, 0x39	; 57
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	89 bf       	out	0x39, r24	; 57
  } // enable interrupts
  sei();
  fa:	78 94       	sei
}
  fc:	08 95       	ret

000000fe <stopTimer0>:

void stopTimer0( void ) {
  cli();
  fe:	f8 94       	cli
  { // disabled interrupts
    TIMSK0 |= ~(1<<OCIE0A);
 100:	89 b7       	in	r24, 0x39	; 57
 102:	8b 6f       	ori	r24, 0xFB	; 251
 104:	89 bf       	out	0x39, r24	; 57
  } // enable interrupts
  sei();
 106:	78 94       	sei
}
 108:	08 95       	ret

0000010a <setupPins>:

void setupPins( void ) {    
  // Configure Output&Input Ports 
  DDRB = ( PORT_LED | PORT_SFX ) & ~( PORT_TST );
 10a:	88 e1       	ldi	r24, 0x18	; 24
 10c:	87 bb       	out	0x17, r24	; 23
  // Clear Output Ports 
  PORTB &= ~( PIN_LED | PIN_SFX );
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	87 7e       	andi	r24, 0xE7	; 231
 112:	88 bb       	out	0x18, r24	; 24
}
 114:	08 95       	ret

00000116 <setupButton>:

void setupButton( void ) {    
  // Configure Pin change interupt on PORT_TST is PCINT1
  GIMSK  |= (1 << PCIE);       // set PCIE0 to enable PCMSK0 scan
 116:	8b b7       	in	r24, 0x3b	; 59
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	8b bf       	out	0x3b, r24	; 59
  PCMSK  |= PORT_TST;          // set PCINT1 to trigger an interrupt on state change 
 11c:	a9 9a       	sbi	0x15, 1	; 21
}
 11e:	08 95       	ret

00000120 <setupSleep>:

void setupSleep( void ) {
  // disable unneeded stuff
  adc_disable();      // ADC Converter
 120:	37 98       	cbi	0x06, 7	; 6
  ac_disable();       // Analog comparator is default
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	88 b9       	out	0x08, r24	; 8
  // Brown out detection is default
  // Internal Voltage Reference is default
  // Watch dog is default
}
 126:	08 95       	ret

00000128 <enterSleep>:

void enterSleep( void ) {
  sleep_enable();
 128:	85 b7       	in	r24, 0x35	; 53
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	85 bf       	out	0x35, r24	; 53
  sleep_cpu();
 12e:	88 95       	sleep
}
 130:	08 95       	ret

00000132 <main>:

////////////////////////////////////////////////////////////////////
int main( void ) {
  cli(); 
 132:	f8 94       	cli
  { // disable interrupts
    setupPins();
 134:	ea df       	rcall	.-44     	; 0x10a <setupPins>
    setupButton();
 136:	ef df       	rcall	.-34     	; 0x116 <setupButton>
    setupTimer0();
 138:	ce df       	rcall	.-100    	; 0xd6 <setupTimer0>
    setupSleep();
 13a:	f2 df       	rcall	.-28     	; 0x120 <setupSleep>
  } // enable interrupts
  sei();
 13c:	78 94       	sei
    cli();
    { // disable interrupts
      ledOn();

      absSeconds    = 0;
      timerMinutes  = TIMER_EPOCH_MIN;
 13e:	c7 e0       	ldi	r28, 0x07	; 7
    set_sleep_mode( SLEEP_MODE_PWR_DOWN );
 140:	85 b7       	in	r24, 0x35	; 53
 142:	87 7e       	andi	r24, 0xE7	; 231
 144:	80 61       	ori	r24, 0x10	; 16
 146:	85 bf       	out	0x35, r24	; 53
    enterSleep();
 148:	ef df       	rcall	.-34     	; 0x128 <enterSleep>
    cli();
 14a:	f8 94       	cli
      ledOn();
 14c:	c4 9a       	sbi	0x18, 4	; 24
      absSeconds    = 0;
 14e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <absSeconds>
      timerMinutes  = TIMER_EPOCH_MIN;
 152:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <timerMinutes>
      buttonPush    = 0;
 156:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <buttonPush>
      
      startTimer0();
 15a:	c3 df       	rcall	.-122    	; 0xe2 <startTimer0>
    } // enable interrupts
    sei();
 15c:	78 94       	sei

    do {
      set_sleep_mode( SLEEP_MODE_IDLE );
 15e:	85 b7       	in	r24, 0x35	; 53
 160:	87 7e       	andi	r24, 0xE7	; 231
 162:	85 bf       	out	0x35, r24	; 53
      enterSleep();
 164:	e1 df       	rcall	.-62     	; 0x128 <enterSleep>

      cli();
 166:	f8 94       	cli
      { // disable interrupts
        if( buttonPush && ( absSeconds <= PRESS_INTERVAL_SEC ) ) {
 168:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <buttonPush>
 16c:	88 23       	and	r24, r24
 16e:	39 f0       	breq	.+14     	; 0x17e <main+0x4c>
 170:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <absSeconds>
 174:	86 30       	cpi	r24, 0x06	; 6
 176:	18 f4       	brcc	.+6      	; 0x17e <main+0x4c>
          ledFlash();
 178:	67 df       	rcall	.-306    	; 0x48 <ledFlash>

#ifdef ENABLE_EPOCH_EXT
          timerMinutes += TIMER_EPOCH_MIN;
#endif
          absSeconds = 0;
 17a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <absSeconds>
        }

        buttonPush = 0;
 17e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <buttonPush>
        localMintutes = minutes;
 182:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <minutes>
      } // enable interrupts
      sei();
 186:	78 94       	sei
    } while( timerMinutes > localMintutes );
 188:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <timerMinutes>
 18c:	08 2e       	mov	r0, r24
 18e:	00 0c       	add	r0, r0
 190:	99 0b       	sbc	r25, r25
 192:	28 17       	cp	r18, r24
 194:	19 06       	cpc	r1, r25
 196:	18 f3       	brcs	.-58     	; 0x15e <main+0x2c>

    cli();
 198:	f8 94       	cli
    { // disable interrupts
      soundOn();
 19a:	c3 9a       	sbi	0x18, 3	; 24
 19c:	8d e1       	ldi	r24, 0x1D	; 29
 19e:	90 e2       	ldi	r25, 0x20	; 32
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x6e>
 1a4:	00 00       	nop
      _delay_ms( 350 );
      soundOff();
 1a6:	c3 98       	cbi	0x18, 3	; 24
      ledOff();
 1a8:	c4 98       	cbi	0x18, 4	; 24

      timerMinutes  = 0;
 1aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <timerMinutes>
      buttonPush    = 0;
 1ae:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <buttonPush>

    } // enable interrupts
    sei();
 1b2:	78 94       	sei
  while ( 1 ) {
 1b4:	c5 cf       	rjmp	.-118    	; 0x140 <main+0xe>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
