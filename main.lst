   1               		.file	"main.c"
   2               	__SP_L__ = 0x3d
   3               	__SREG__ = 0x3f
   4               	__tmp_reg__ = 0
   5               	__zero_reg__ = 1
   6               		.text
   7               	.Ltext0:
   8               		.cfi_sections	.debug_frame
   9               	.global	ledFlash
  11               	ledFlash:
  12               	.LFB10:
  13               		.file 1 "main.c"
   1:main.c        **** // PIN DEFINITIONS 
   2:main.c        **** //
   3:main.c        **** // ATTinyV13
   4:main.c        **** //
   5:main.c        **** // PB1 <- switch in
   6:main.c        **** //
   7:main.c        **** // PB4 -> led on
   8:main.c        **** // PB3 -> audio on
   9:main.c        **** //
  10:main.c        **** //
  11:main.c        **** ////////////////////////////////////////////////////////////////////
  12:main.c        **** 
  13:main.c        **** // We are sligthy slower than advertised at 5V
  14:main.c        **** // #define F_CPU 1044000UL 
  15:main.c        **** // For V4.5 we run at about
  16:main.c        **** #define F_CPU 93960UL 
  17:main.c        **** 
  18:main.c        **** #include <stdio.h>
  19:main.c        **** 
  20:main.c        **** #include <util/delay.h>
  21:main.c        **** #include <avr/sleep.h>
  22:main.c        **** #include <avr/power.h>
  23:main.c        **** #include <avr/interrupt.h>
  24:main.c        **** 
  25:main.c        **** 
  26:main.c        **** #define PORT_SFX              (1 << DDB3)
  27:main.c        **** #define PIN_SFX               (1 << PB3)
  28:main.c        **** 
  29:main.c        **** #define PORT_LED              (1 << DDB4)
  30:main.c        **** #define PIN_LED               (1 << PB4)
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** #define PORT_TST              (1 << PCINT1)
  34:main.c        **** #define PIN_TST               ( PINB & PORT_TST )
  35:main.c        **** 
  36:main.c        **** #define TIMER_EPOCH_MIN       7
  37:main.c        **** #define PRESS_INTERVAL_SEC    5
  38:main.c        **** #undef  ENABLE_EPOCH_EXT
  39:main.c        **** 
  40:main.c        **** #define adc_disable()         (ADCSRA &= ~(1<<ADEN))
  41:main.c        **** #define ac_disable()          (ACSR = (1<<ACD))
  42:main.c        **** 
  43:main.c        **** #define soundOn( void )       PORTB |= PIN_SFX;
  44:main.c        **** #define soundOff( void )      PORTB &= ~PIN_SFX;
  45:main.c        **** #define soundToggle( void )   PORTB ^= PIN_SFX;
  46:main.c        **** 
  47:main.c        **** #define ledOn( void )         PORTB |= PIN_LED;
  48:main.c        **** #define ledOff( void )        PORTB &= ~PIN_LED;
  49:main.c        **** #define ledToggle( void )     PORTB ^= PIN_LED;
  50:main.c        **** 
  51:main.c        **** void ledFlash( void ) {
  14               		.loc 1 51 23 view -0
  15               		.cfi_startproc
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
  52:main.c        ****   ledToggle();  
  20               		.loc 1 52 3 view .LVU1
  21 0000 98B3      		in r25,0x18
  22 0002 20E1      		ldi r18,lo8(16)
  23 0004 9227      		eor r25,r18
  24 0006 98BB      		out 0x18,r25
  25               		.loc 1 52 14 view .LVU2
  53:main.c        ****   _delay_ms( 50 );
  26               		.loc 1 53 3 view .LVU3
  27               	.LVL0:
  28               	.LBB9:
  29               	.LBI9:
  30               		.file 2 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** _delay_ms(double __ms)
  31               		.loc 2 166 1 view .LVU4
  32               	.LBB10:
 167:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	double __tmp ;
  33               		.loc 2 168 2 view .LVU5
 169:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  34               		.loc 2 172 2 view .LVU6
 173:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  35               		.loc 2 173 2 view .LVU7
 174:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
  36               		.loc 2 174 2 view .LVU8
 175:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  37               		.loc 2 184 3 view .LVU9
 185:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  38               		.loc 2 187 2 view .LVU10
  39 0008 86E9      		ldi r24,lo8(1174)
  40 000a 94E0      		ldi r25,hi8(1174)
  41 000c 0197      	1:	sbiw r24,1
  42 000e 01F4      		brne 1b
  43 0010 0000      		nop
  44               	.LVL1:
  45               		.loc 2 187 2 is_stmt 0 view .LVU11
  46               	.LBE10:
  47               	.LBE9:
  54:main.c        ****   ledToggle();  
  48               		.loc 1 54 3 is_stmt 1 view .LVU12
  49 0012 88B3      		in r24,0x18
  50 0014 8227      		eor r24,r18
  51 0016 88BB      		out 0x18,r24
  52               		.loc 1 54 14 view .LVU13
  53               	/* epilogue start */
  55:main.c        **** }
  54               		.loc 1 55 1 is_stmt 0 view .LVU14
  55 0018 0895      		ret
  56               		.cfi_endproc
  57               	.LFE10:
  59               	.global	soundFlash
  61               	soundFlash:
  62               	.LFB23:
  63               		.cfi_startproc
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 0 */
  67               	.L__stack_usage = 0
  68 001a 00C0      		rjmp ledFlash
  69               		.cfi_endproc
  70               	.LFE23:
  72               	.global	__vector_2
  74               	__vector_2:
  75               	.LFB12:
  56:main.c        **** 
  57:main.c        **** void soundFlash( void ) {
  58:main.c        ****   ledToggle();  
  59:main.c        ****   _delay_ms( 50 );
  60:main.c        ****   ledToggle();  
  61:main.c        **** }
  62:main.c        **** 
  63:main.c        **** volatile unsigned int milliseconds;
  64:main.c        **** volatile unsigned char seconds;
  65:main.c        **** volatile unsigned char absSeconds;
  66:main.c        **** volatile unsigned char minutes;
  67:main.c        **** 
  68:main.c        **** volatile unsigned char buttonPush;
  69:main.c        **** 
  70:main.c        **** signed char timerMinutes = -1;
  71:main.c        **** 
  72:main.c        **** // Gets called whenever the someone pressed the button
  73:main.c        **** ISR( PCINT0_vect ) {
  76               		.loc 1 73 20 is_stmt 1 view -0
  77               		.cfi_startproc
  78               		.loc 1 73 20 is_stmt 0 view .LVU16
  79 001c 8F93      		__gcc_isr 1
  80               	/* prologue: Signal */
  81               	/* frame size = 0 */
  82               	/* stack size = 0...4 */
  83               	.L__stack_usage = 0 + __gcc_isr.n_pushed
  74:main.c        ****   if( PIN_TST ) {
  84               		.loc 1 74 3 is_stmt 1 view .LVU17
  85               		.loc 1 74 5 is_stmt 0 view .LVU18
  86 001e B19B      		sbis 0x16,1
  87 0020 00C0      		rjmp .L3
  75:main.c        ****     buttonPush = 1;
  88               		.loc 1 75 5 is_stmt 1 view .LVU19
  89               		.loc 1 75 16 is_stmt 0 view .LVU20
  90 0022 81E0      		ldi r24,lo8(1)
  91 0024 8093 0000 		sts buttonPush,r24
  92               	.L3:
  93               	/* epilogue start */
  76:main.c        ****   }
  77:main.c        **** }
  94               		.loc 1 77 1 view .LVU21
  95 0028 8F91      		__gcc_isr 2
  96 002a 1895      		reti
  97               		__gcc_isr 0,r24
  98               		.cfi_endproc
  99               	.LFE12:
 101               	.global	__vector_6
 103               	__vector_6:
 104               	.LFB13:
  78:main.c        **** 
  79:main.c        **** ISR( TIM0_COMPA_vect ) {
 105               		.loc 1 79 24 is_stmt 1 view -0
 106               		.cfi_startproc
 107 002c 1F92 1FB6 		__gcc_isr 1
 107      1F92 1124 
 107      2F93 
 108 0036 8F93      		push r24
 109               		.cfi_def_cfa_offset 3
 110               		.cfi_offset 24, -2
 111 0038 9F93      		push r25
 112               		.cfi_def_cfa_offset 4
 113               		.cfi_offset 25, -3
 114               	/* prologue: Signal */
 115               	/* frame size = 0 */
 116               	/* stack size = 2...6 */
 117               	.L__stack_usage = 2 + __gcc_isr.n_pushed
  80:main.c        ****   // Count time
  81:main.c        ****   if( ++milliseconds == 1000 )  {
 118               		.loc 1 81 3 view .LVU23
 119               		.loc 1 81 7 is_stmt 0 view .LVU24
 120 003a 8091 0000 		lds r24,milliseconds
 121 003e 9091 0000 		lds r25,milliseconds+1
 122 0042 0196      		adiw r24,1
 123               		.loc 1 81 5 view .LVU25
 124 0044 9093 0000 		sts milliseconds+1,r25
 125 0048 8093 0000 		sts milliseconds,r24
 126 004c 883E      		cpi r24,-24
 127 004e 9340      		sbci r25,3
 128 0050 01F4      		brne .L8
  82:main.c        ****     ++absSeconds;
 129               		.loc 1 82 5 is_stmt 1 view .LVU26
 130 0052 8091 0000 		lds r24,absSeconds
 131 0056 8F5F      		subi r24,lo8(-(1))
 132 0058 8093 0000 		sts absSeconds,r24
  83:main.c        ****     milliseconds = 0;
 133               		.loc 1 83 5 view .LVU27
 134               		.loc 1 83 18 is_stmt 0 view .LVU28
 135 005c 1092 0000 		sts milliseconds+1,__zero_reg__
 136 0060 1092 0000 		sts milliseconds,__zero_reg__
  84:main.c        ****     if( ++seconds == 60 ) {
 137               		.loc 1 84 5 is_stmt 1 view .LVU29
 138               		.loc 1 84 9 is_stmt 0 view .LVU30
 139 0064 8091 0000 		lds r24,seconds
 140 0068 8F5F      		subi r24,lo8(-(1))
 141               		.loc 1 84 7 view .LVU31
 142 006a 8093 0000 		sts seconds,r24
 143 006e 8C33      		cpi r24,lo8(60)
 144 0070 01F4      		brne .L8
  85:main.c        ****       seconds = 0;
 145               		.loc 1 85 7 is_stmt 1 view .LVU32
 146               		.loc 1 85 15 is_stmt 0 view .LVU33
 147 0072 1092 0000 		sts seconds,__zero_reg__
  86:main.c        ****       ++minutes;
 148               		.loc 1 86 7 is_stmt 1 view .LVU34
 149 0076 8091 0000 		lds r24,minutes
 150 007a 8F5F      		subi r24,lo8(-(1))
 151 007c 8093 0000 		sts minutes,r24
 152               	.L8:
 153               	/* epilogue start */
  87:main.c        ****     }
  88:main.c        ****   }
  89:main.c        **** }
 154               		.loc 1 89 1 is_stmt 0 view .LVU35
 155 0080 9F91      		pop r25
 156 0082 8F91      		pop r24
 157 0084 2F91 1F90 		__gcc_isr 2
 157      1FBE 1F90 
 158 008c 1895      		reti
 159               		__gcc_isr 0,r18
 160               		.cfi_endproc
 161               	.LFE13:
 163               	.global	setupTimer0
 165               	setupTimer0:
 166               	.LFB14:
  90:main.c        **** 
  91:main.c        **** void setupTimer0( void ) {
 167               		.loc 1 91 26 is_stmt 1 view -0
 168               		.cfi_startproc
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
  92:main.c        ****   // Configure Timer statics CTC with compare match
  93:main.c        ****   TCCR0A = (1<<WGM01);
 173               		.loc 1 93 3 view .LVU37
 174               		.loc 1 93 10 is_stmt 0 view .LVU38
 175 008e 82E0      		ldi r24,lo8(2)
 176 0090 8FBD      		out 0x2f,r24
  94:main.c        ****   // Set prescalar to 1/8,
  95:main.c        ****   TCCR0B = (1<<CS01);
 177               		.loc 1 95 3 is_stmt 1 view .LVU39
 178               		.loc 1 95 10 is_stmt 0 view .LVU40
 179 0092 83BF      		out 0x33,r24
  96:main.c        ****   // ( F_CPU/8 Prescalar/1000Hz = 132 cycles/ms where 1000Hz equals 1 ms
  97:main.c        ****   OCR0A = 132 -1;
 180               		.loc 1 97 3 is_stmt 1 view .LVU41
 181               		.loc 1 97 9 is_stmt 0 view .LVU42
 182 0094 83E8      		ldi r24,lo8(-125)
 183 0096 86BF      		out 0x36,r24
 184               	/* epilogue start */
  98:main.c        **** }
 185               		.loc 1 98 1 view .LVU43
 186 0098 0895      		ret
 187               		.cfi_endproc
 188               	.LFE14:
 190               	.global	startTimer0
 192               	startTimer0:
 193               	.LFB15:
  99:main.c        **** 
 100:main.c        **** void startTimer0( void ) {
 194               		.loc 1 100 26 is_stmt 1 view -0
 195               		.cfi_startproc
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
 101:main.c        ****   cli(); 
 200               		.loc 1 101 3 view .LVU45
 201               	/* #APP */
 202               	 ;  101 "main.c" 1
 203 009a F894      		cli
 204               	 ;  0 "" 2
 102:main.c        ****   { // disabled interrupts
 103:main.c        ****     // Init timer start values
 104:main.c        ****     milliseconds  = 0;
 205               		.loc 1 104 5 view .LVU46
 206               		.loc 1 104 19 is_stmt 0 view .LVU47
 207               	/* #NOAPP */
 208 009c 1092 0000 		sts milliseconds+1,__zero_reg__
 209 00a0 1092 0000 		sts milliseconds,__zero_reg__
 105:main.c        ****     seconds       = 0;
 210               		.loc 1 105 5 is_stmt 1 view .LVU48
 211               		.loc 1 105 19 is_stmt 0 view .LVU49
 212 00a4 1092 0000 		sts seconds,__zero_reg__
 106:main.c        ****     minutes       = 0;
 213               		.loc 1 106 5 is_stmt 1 view .LVU50
 214               		.loc 1 106 19 is_stmt 0 view .LVU51
 215 00a8 1092 0000 		sts minutes,__zero_reg__
 107:main.c        **** 
 108:main.c        ****     // Start Timer for each ~ms
 109:main.c        ****     TIMSK0 |= (1<<OCIE0A);
 216               		.loc 1 109 5 is_stmt 1 view .LVU52
 217               		.loc 1 109 12 is_stmt 0 view .LVU53
 218 00ac 89B7      		in r24,0x39
 219 00ae 8460      		ori r24,lo8(4)
 220 00b0 89BF      		out 0x39,r24
 110:main.c        ****   } // enable interrupts
 111:main.c        ****   sei();
 221               		.loc 1 111 3 is_stmt 1 view .LVU54
 222               	/* #APP */
 223               	 ;  111 "main.c" 1
 224 00b2 7894      		sei
 225               	 ;  0 "" 2
 226               	/* #NOAPP */
 227               	/* epilogue start */
 112:main.c        **** }
 228               		.loc 1 112 1 is_stmt 0 view .LVU55
 229 00b4 0895      		ret
 230               		.cfi_endproc
 231               	.LFE15:
 233               	.global	stopTimer0
 235               	stopTimer0:
 236               	.LFB16:
 113:main.c        **** 
 114:main.c        **** void stopTimer0( void ) {
 237               		.loc 1 114 25 is_stmt 1 view -0
 238               		.cfi_startproc
 239               	/* prologue: function */
 240               	/* frame size = 0 */
 241               	/* stack size = 0 */
 242               	.L__stack_usage = 0
 115:main.c        ****   cli();
 243               		.loc 1 115 3 view .LVU57
 244               	/* #APP */
 245               	 ;  115 "main.c" 1
 246 00b6 F894      		cli
 247               	 ;  0 "" 2
 116:main.c        ****   { // disabled interrupts
 117:main.c        ****     TIMSK0 |= ~(1<<OCIE0A);
 248               		.loc 1 117 5 view .LVU58
 249               		.loc 1 117 12 is_stmt 0 view .LVU59
 250               	/* #NOAPP */
 251 00b8 89B7      		in r24,0x39
 252 00ba 8B6F      		ori r24,lo8(-5)
 253 00bc 89BF      		out 0x39,r24
 118:main.c        ****   } // enable interrupts
 119:main.c        ****   sei();
 254               		.loc 1 119 3 is_stmt 1 view .LVU60
 255               	/* #APP */
 256               	 ;  119 "main.c" 1
 257 00be 7894      		sei
 258               	 ;  0 "" 2
 259               	/* #NOAPP */
 260               	/* epilogue start */
 120:main.c        **** }
 261               		.loc 1 120 1 is_stmt 0 view .LVU61
 262 00c0 0895      		ret
 263               		.cfi_endproc
 264               	.LFE16:
 266               	.global	setupPins
 268               	setupPins:
 269               	.LFB17:
 121:main.c        **** 
 122:main.c        **** void setupPins( void ) {    
 270               		.loc 1 122 24 is_stmt 1 view -0
 271               		.cfi_startproc
 272               	/* prologue: function */
 273               	/* frame size = 0 */
 274               	/* stack size = 0 */
 275               	.L__stack_usage = 0
 123:main.c        ****   // Configure Output&Input Ports 
 124:main.c        ****   DDRB = ( PORT_LED | PORT_SFX ) & ~( PORT_TST );
 276               		.loc 1 124 3 view .LVU63
 277               		.loc 1 124 8 is_stmt 0 view .LVU64
 278 00c2 88E1      		ldi r24,lo8(24)
 279 00c4 87BB      		out 0x17,r24
 125:main.c        ****   // Clear Output Ports 
 126:main.c        ****   PORTB &= ~( PIN_LED | PIN_SFX );
 280               		.loc 1 126 3 is_stmt 1 view .LVU65
 281               		.loc 1 126 9 is_stmt 0 view .LVU66
 282 00c6 88B3      		in r24,0x18
 283 00c8 877E      		andi r24,lo8(-25)
 284 00ca 88BB      		out 0x18,r24
 285               	/* epilogue start */
 127:main.c        **** }
 286               		.loc 1 127 1 view .LVU67
 287 00cc 0895      		ret
 288               		.cfi_endproc
 289               	.LFE17:
 291               	.global	setupButton
 293               	setupButton:
 294               	.LFB18:
 128:main.c        **** 
 129:main.c        **** void setupButton( void ) {    
 295               		.loc 1 129 26 is_stmt 1 view -0
 296               		.cfi_startproc
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 0 */
 300               	.L__stack_usage = 0
 130:main.c        ****   // Configure Pin change interupt on PORT_TST is PCINT1
 131:main.c        ****   GIMSK  |= (1 << PCIE);       // set PCIE0 to enable PCMSK0 scan
 301               		.loc 1 131 3 view .LVU69
 302               		.loc 1 131 10 is_stmt 0 view .LVU70
 303 00ce 8BB7      		in r24,0x3b
 304 00d0 8062      		ori r24,lo8(32)
 305 00d2 8BBF      		out 0x3b,r24
 132:main.c        ****   PCMSK  |= PORT_TST;          // set PCINT1 to trigger an interrupt on state change 
 306               		.loc 1 132 3 is_stmt 1 view .LVU71
 307               		.loc 1 132 10 is_stmt 0 view .LVU72
 308 00d4 A99A      		sbi 0x15,1
 309               	/* epilogue start */
 133:main.c        **** }
 310               		.loc 1 133 1 view .LVU73
 311 00d6 0895      		ret
 312               		.cfi_endproc
 313               	.LFE18:
 315               	.global	setupSleep
 317               	setupSleep:
 318               	.LFB19:
 134:main.c        **** 
 135:main.c        **** void setupSleep( void ) {
 319               		.loc 1 135 25 is_stmt 1 view -0
 320               		.cfi_startproc
 321               	/* prologue: function */
 322               	/* frame size = 0 */
 323               	/* stack size = 0 */
 324               	.L__stack_usage = 0
 136:main.c        ****   // disable unneeded stuff
 137:main.c        ****   adc_disable();      // ADC Converter
 325               		.loc 1 137 3 view .LVU75
 326 00d8 3798      		cbi 0x6,7
 138:main.c        ****   ac_disable();       // Analog comparator is default
 327               		.loc 1 138 3 view .LVU76
 328 00da 80E8      		ldi r24,lo8(-128)
 329 00dc 88B9      		out 0x8,r24
 330               	/* epilogue start */
 139:main.c        ****   // Brown out detection is default
 140:main.c        ****   // Internal Voltage Reference is default
 141:main.c        ****   // Watch dog is default
 142:main.c        **** }
 331               		.loc 1 142 1 is_stmt 0 view .LVU77
 332 00de 0895      		ret
 333               		.cfi_endproc
 334               	.LFE19:
 336               	.global	enterSleep
 338               	enterSleep:
 339               	.LFB20:
 143:main.c        **** 
 144:main.c        **** void enterSleep( void ) {
 340               		.loc 1 144 25 is_stmt 1 view -0
 341               		.cfi_startproc
 342               	/* prologue: function */
 343               	/* frame size = 0 */
 344               	/* stack size = 0 */
 345               	.L__stack_usage = 0
 145:main.c        ****   sleep_enable();
 346               		.loc 1 145 3 view .LVU79
 347               		.loc 1 145 3 view .LVU80
 348 00e0 85B7      		in r24,0x35
 349 00e2 8062      		ori r24,lo8(32)
 350 00e4 85BF      		out 0x35,r24
 351               		.loc 1 145 3 view .LVU81
 146:main.c        ****   sleep_cpu();
 352               		.loc 1 146 3 view .LVU82
 353               		.loc 1 146 3 view .LVU83
 354               	/* #APP */
 355               	 ;  146 "main.c" 1
 356 00e6 8895      		sleep
 357               		
 358               	 ;  0 "" 2
 359               		.loc 1 146 3 view .LVU84
 360               	/* #NOAPP */
 361               	/* epilogue start */
 147:main.c        **** }
 362               		.loc 1 147 1 is_stmt 0 view .LVU85
 363 00e8 0895      		ret
 364               		.cfi_endproc
 365               	.LFE20:
 367               		.section	.text.startup,"ax",@progbits
 368               	.global	main
 370               	main:
 371               	.LFB21:
 148:main.c        **** 
 149:main.c        **** ////////////////////////////////////////////////////////////////////
 150:main.c        **** int main( void ) {
 372               		.loc 1 150 18 is_stmt 1 view -0
 373               		.cfi_startproc
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
 151:main.c        ****   cli(); 
 378               		.loc 1 151 3 view .LVU87
 379               	/* #APP */
 380               	 ;  151 "main.c" 1
 381 0000 F894      		cli
 382               	 ;  0 "" 2
 152:main.c        ****   { // disable interrupts
 153:main.c        ****     setupPins();
 383               		.loc 1 153 5 view .LVU88
 384               	/* #NOAPP */
 385 0002 00D0      		rcall setupPins
 386               	.LVL2:
 154:main.c        ****     setupButton();
 387               		.loc 1 154 5 view .LVU89
 388 0004 00D0      		rcall setupButton
 389               	.LVL3:
 155:main.c        ****     setupTimer0();
 390               		.loc 1 155 5 view .LVU90
 391 0006 00D0      		rcall setupTimer0
 392               	.LVL4:
 156:main.c        ****     setupSleep();
 393               		.loc 1 156 5 view .LVU91
 394 0008 00D0      		rcall setupSleep
 395               	.LVL5:
 157:main.c        ****   } // enable interrupts
 158:main.c        ****   sei();
 396               		.loc 1 158 3 view .LVU92
 397               	/* #APP */
 398               	 ;  158 "main.c" 1
 399 000a 7894      		sei
 400               	 ;  0 "" 2
 401               	/* #NOAPP */
 402               	.LBB11:
 159:main.c        **** 
 160:main.c        ****   // the loop function runs over and over again forever
 161:main.c        ****   while ( 1 ) {
 162:main.c        ****     set_sleep_mode( SLEEP_MODE_PWR_DOWN );
 163:main.c        ****     enterSleep();
 164:main.c        **** 
 165:main.c        ****     unsigned int localMintutes = 0;
 166:main.c        ****     
 167:main.c        ****     cli();
 168:main.c        ****     { // disable interrupts
 169:main.c        ****       ledOn();
 170:main.c        **** 
 171:main.c        ****       absSeconds    = 0;
 172:main.c        ****       timerMinutes  = TIMER_EPOCH_MIN;
 403               		.loc 1 172 21 is_stmt 0 view .LVU93
 404 000c C7E0      		ldi r28,lo8(7)
 405               	.L22:
 406               	.LBE11:
 161:main.c        ****     set_sleep_mode( SLEEP_MODE_PWR_DOWN );
 407               		.loc 1 161 3 is_stmt 1 view .LVU94
 408               	.LBB14:
 162:main.c        ****     enterSleep();
 409               		.loc 1 162 5 view .LVU95
 162:main.c        ****     enterSleep();
 410               		.loc 1 162 5 view .LVU96
 411 000e 85B7      		in r24,0x35
 412 0010 877E      		andi r24,lo8(-25)
 413 0012 8061      		ori r24,lo8(16)
 414 0014 85BF      		out 0x35,r24
 162:main.c        ****     enterSleep();
 415               		.loc 1 162 5 view .LVU97
 163:main.c        **** 
 416               		.loc 1 163 5 view .LVU98
 417 0016 00D0      		rcall enterSleep
 418               	.LVL6:
 165:main.c        ****     
 419               		.loc 1 165 5 view .LVU99
 167:main.c        ****     { // disable interrupts
 420               		.loc 1 167 5 view .LVU100
 421               	/* #APP */
 422               	 ;  167 "main.c" 1
 423 0018 F894      		cli
 424               	 ;  0 "" 2
 169:main.c        **** 
 425               		.loc 1 169 7 view .LVU101
 426               	/* #NOAPP */
 427 001a C49A      		sbi 0x18,4
 169:main.c        **** 
 428               		.loc 1 169 14 view .LVU102
 171:main.c        ****       timerMinutes  = TIMER_EPOCH_MIN;
 429               		.loc 1 171 7 view .LVU103
 171:main.c        ****       timerMinutes  = TIMER_EPOCH_MIN;
 430               		.loc 1 171 21 is_stmt 0 view .LVU104
 431 001c 1092 0000 		sts absSeconds,__zero_reg__
 432               		.loc 1 172 7 is_stmt 1 view .LVU105
 433               		.loc 1 172 21 is_stmt 0 view .LVU106
 434 0020 C093 0000 		sts timerMinutes,r28
 173:main.c        ****       buttonPush    = 0;
 435               		.loc 1 173 7 is_stmt 1 view .LVU107
 436               		.loc 1 173 21 is_stmt 0 view .LVU108
 437 0024 1092 0000 		sts buttonPush,__zero_reg__
 174:main.c        ****       
 175:main.c        ****       startTimer0();
 438               		.loc 1 175 7 is_stmt 1 view .LVU109
 439 0028 00D0      		rcall startTimer0
 440               	.LVL7:
 176:main.c        ****     } // enable interrupts
 177:main.c        ****     sei();
 441               		.loc 1 177 5 view .LVU110
 442               	/* #APP */
 443               	 ;  177 "main.c" 1
 444 002a 7894      		sei
 445               	 ;  0 "" 2
 446               	.LVL8:
 447               	/* #NOAPP */
 448               	.L21:
 178:main.c        **** 
 179:main.c        ****     do {
 449               		.loc 1 179 5 view .LVU111
 180:main.c        ****       set_sleep_mode( SLEEP_MODE_IDLE );
 450               		.loc 1 180 7 view .LVU112
 451               		.loc 1 180 7 view .LVU113
 452 002c 85B7      		in r24,0x35
 453 002e 877E      		andi r24,lo8(-25)
 454 0030 85BF      		out 0x35,r24
 455               		.loc 1 180 7 view .LVU114
 181:main.c        ****       enterSleep();
 456               		.loc 1 181 7 view .LVU115
 457 0032 00D0      		rcall enterSleep
 458               	.LVL9:
 182:main.c        **** 
 183:main.c        ****       cli();
 459               		.loc 1 183 7 view .LVU116
 460               	/* #APP */
 461               	 ;  183 "main.c" 1
 462 0034 F894      		cli
 463               	 ;  0 "" 2
 184:main.c        ****       { // disable interrupts
 185:main.c        ****         if( buttonPush && ( absSeconds <= PRESS_INTERVAL_SEC ) ) {
 464               		.loc 1 185 9 view .LVU117
 465               		.loc 1 185 13 is_stmt 0 view .LVU118
 466               	/* #NOAPP */
 467 0036 8091 0000 		lds r24,buttonPush
 468               		.loc 1 185 11 view .LVU119
 469 003a 8823      		tst r24
 470 003c 01F0      		breq .L20
 471               		.loc 1 185 40 discriminator 1 view .LVU120
 472 003e 8091 0000 		lds r24,absSeconds
 473               		.loc 1 185 24 discriminator 1 view .LVU121
 474 0042 8630      		cpi r24,lo8(6)
 475 0044 00F4      		brsh .L20
 186:main.c        ****           ledFlash();
 476               		.loc 1 186 11 is_stmt 1 view .LVU122
 477 0046 00D0      		rcall ledFlash
 478               	.LVL10:
 187:main.c        **** 
 188:main.c        **** #ifdef ENABLE_EPOCH_EXT
 189:main.c        ****           timerMinutes += TIMER_EPOCH_MIN;
 190:main.c        **** #endif
 191:main.c        ****           absSeconds = 0;
 479               		.loc 1 191 11 view .LVU123
 480               		.loc 1 191 22 is_stmt 0 view .LVU124
 481 0048 1092 0000 		sts absSeconds,__zero_reg__
 482               	.L20:
 192:main.c        ****         }
 193:main.c        **** 
 194:main.c        ****         buttonPush = 0;
 483               		.loc 1 194 9 is_stmt 1 view .LVU125
 484               		.loc 1 194 20 is_stmt 0 view .LVU126
 485 004c 1092 0000 		sts buttonPush,__zero_reg__
 195:main.c        ****         localMintutes = minutes;
 486               		.loc 1 195 9 is_stmt 1 view .LVU127
 487               		.loc 1 195 23 is_stmt 0 view .LVU128
 488 0050 2091 0000 		lds r18,minutes
 489               	.LVL11:
 196:main.c        ****       } // enable interrupts
 197:main.c        ****       sei();
 490               		.loc 1 197 7 is_stmt 1 view .LVU129
 491               	/* #APP */
 492               	 ;  197 "main.c" 1
 493 0054 7894      		sei
 494               	 ;  0 "" 2
 198:main.c        ****     } while( timerMinutes > localMintutes );
 495               		.loc 1 198 12 view .LVU130
 496               		.loc 1 198 27 is_stmt 0 view .LVU131
 497               	/* #NOAPP */
 498 0056 8091 0000 		lds r24,timerMinutes
 499 005a 082E      		mov __tmp_reg__,r24
 500 005c 000C      		lsl r0
 501 005e 990B      		sbc r25,r25
 502               		.loc 1 198 5 view .LVU132
 503 0060 2817      		cp r18,r24
 504 0062 1906      		cpc __zero_reg__,r25
 505 0064 00F0      		brlo .L21
 199:main.c        **** 
 200:main.c        ****     cli();
 506               		.loc 1 200 5 is_stmt 1 view .LVU133
 507               	/* #APP */
 508               	 ;  200 "main.c" 1
 509 0066 F894      		cli
 510               	 ;  0 "" 2
 201:main.c        ****     { // disable interrupts
 202:main.c        ****       soundOn();
 511               		.loc 1 202 7 view .LVU134
 512               	/* #NOAPP */
 513 0068 C39A      		sbi 0x18,3
 514               		.loc 1 202 16 view .LVU135
 203:main.c        ****       _delay_ms( 350 );
 515               		.loc 1 203 7 view .LVU136
 516               	.LVL12:
 517               	.LBB12:
 518               	.LBI12:
 166:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 519               		.loc 2 166 1 view .LVU137
 520               	.LBB13:
 168:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 521               		.loc 2 168 2 view .LVU138
 172:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 522               		.loc 2 172 2 view .LVU139
 173:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 523               		.loc 2 173 2 view .LVU140
 174:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 524               		.loc 2 174 2 view .LVU141
 184:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 525               		.loc 2 184 3 view .LVU142
 526               		.loc 2 187 2 view .LVU143
 527 006a 8DE1      		ldi r24,lo8(8221)
 528 006c 90E2      		ldi r25,hi8(8221)
 529 006e 0197      	1:	sbiw r24,1
 530 0070 01F4      		brne 1b
 531 0072 0000      		nop
 532               	.LVL13:
 533               		.loc 2 187 2 is_stmt 0 view .LVU144
 534               	.LBE13:
 535               	.LBE12:
 204:main.c        ****       soundOff();
 536               		.loc 1 204 7 is_stmt 1 view .LVU145
 537 0074 C398      		cbi 0x18,3
 538               		.loc 1 204 17 view .LVU146
 205:main.c        ****       ledOff();
 539               		.loc 1 205 7 view .LVU147
 540 0076 C498      		cbi 0x18,4
 541               		.loc 1 205 15 view .LVU148
 206:main.c        **** 
 207:main.c        ****       timerMinutes  = 0;
 542               		.loc 1 207 7 view .LVU149
 543               		.loc 1 207 21 is_stmt 0 view .LVU150
 544 0078 1092 0000 		sts timerMinutes,__zero_reg__
 208:main.c        ****       buttonPush    = 0;
 545               		.loc 1 208 7 is_stmt 1 view .LVU151
 546               		.loc 1 208 21 is_stmt 0 view .LVU152
 547 007c 1092 0000 		sts buttonPush,__zero_reg__
 209:main.c        **** 
 210:main.c        ****     } // enable interrupts
 211:main.c        ****     sei();
 548               		.loc 1 211 5 is_stmt 1 view .LVU153
 549               	/* #APP */
 550               	 ;  211 "main.c" 1
 551 0080 7894      		sei
 552               	 ;  0 "" 2
 553               	/* #NOAPP */
 554               	.LBE14:
 161:main.c        ****     set_sleep_mode( SLEEP_MODE_PWR_DOWN );
 555               		.loc 1 161 9 view .LVU154
 161:main.c        ****     set_sleep_mode( SLEEP_MODE_PWR_DOWN );
 556               		.loc 1 161 15 is_stmt 0 view .LVU155
 557 0082 00C0      		rjmp .L22
 558               		.cfi_endproc
 559               	.LFE21:
 561               	.global	timerMinutes
 562               		.data
 565               	timerMinutes:
 566 0000 FF        		.byte	-1
 567               		.comm	buttonPush,1,1
 568               		.comm	minutes,1,1
 569               		.comm	absSeconds,1,1
 570               		.comm	seconds,1,1
 571               		.comm	milliseconds,2,1
 572               		.text
 573               	.Letext0:
 574               		.file 3 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdint.h"
 575               		.file 4 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:2      *ABS*:000000000000003d __SP_L__
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:3      *ABS*:000000000000003f __SREG__
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:4      *ABS*:0000000000000000 __tmp_reg__
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:5      *ABS*:0000000000000001 __zero_reg__
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:11     .text:0000000000000000 ledFlash
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:61     .text:000000000000001a soundFlash
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:74     .text:000000000000001c __vector_2
                            *ABS*:0000000000000001 __gcc_isr.n_pushed.001
                            *COM*:0000000000000001 buttonPush
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:103    .text:000000000000002c __vector_6
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.002
                            *COM*:0000000000000002 milliseconds
                            *COM*:0000000000000001 absSeconds
                            *COM*:0000000000000001 seconds
                            *COM*:0000000000000001 minutes
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:165    .text:000000000000008e setupTimer0
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:192    .text:000000000000009a startTimer0
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:235    .text:00000000000000b6 stopTimer0
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:268    .text:00000000000000c2 setupPins
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:293    .text:00000000000000ce setupButton
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:317    .text:00000000000000d8 setupSleep
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:338    .text:00000000000000e0 enterSleep
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:370    .text.startup:0000000000000000 main
/var/folders/61/rckhb61x1r9_jpkwvm_2b_v40000gn/T//ccZd9Uik.s:565    .data:0000000000000000 timerMinutes

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
